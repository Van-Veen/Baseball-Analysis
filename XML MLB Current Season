


library(XML)
library(magrittr)
library(data.table)
library(lubridate)
library(plyr)
library(stringr)

loadSource <- function(fileName, atWork = F){
  
  fp <- "/Users/joelstewart/Desktop/Baseball Analysis/Syntax/"
  fpw <- "C:/Users/jstewart/Desktop/Baseball Analysis/Syntax/"
  
  if(atWork == T){
    source(paste(fpw, fileName, ".R", sep = ""))
  }else{
    source(paste(fp, fileName, ".R", sep = ""))
  }
  
  #return(targetSource)
  
}

loadSource("BB Main", T)

IDmaker <- function(fName, lName, atWork = T){
  
  t1 <- tableLoader("Master", atWork = atWork) %>% .[, unique(retroID)]
  
  newID <- ifelse(nchar(lName) == 3, paste(lName, "-", sep = ""), lName)
  newID <- ifelse(nchar(lName) == 2, paste(lName, "--", sep = ""), lName)
  newID <- tolower(substr(newID, 1, 4))
  newID <- paste(newID, tolower(substr(fName, 1, 1)), sep = "")
  
  temp <- paste(newID, "0", sep = "")
  
  existing <- length(t1[grep(temp, t1)]) + 1
  existing <- ifelse(nchar(existing) == 1, paste("00", existing, sep = ""), existing)
  existing <- ifelse(nchar(existing) == 2, paste("0", existing, sep = ""), existing)
  
  newID <- paste(newID, existing, sep = "")
  
  return(newID)
  
}


gameURL <- "http://gd2.mlb.com/components/game/mlb/year_2017/month_08/day_09/gid_2017_08_09_lanmlb_arimlb_1/game_events.xml"

eventParse <- function(gameURL){

  
  root <- xmlParse(file = gameURL) %>% xmlRoot(.)
  
  N1 <- sum(names(root) == "inning")
  
  PLAYS <- data.table("Val" = NA, "Var" = NA, "Idx" = 0)
  PITCHES <- data.table("Val" = NA, "Var" = NA, "Idx" = 0)
  
  for(inning in 1:N1){
    
    N2 <- names(root[[inning]]) %>% length(.)
    
    for(section in 1:N2){
      
      N3 <- root[[inning]][[section]] %>% names(.) %>% length(.)
      
      if(N3 != 0){
      
      for(action in 1:N3){
        
        T1 <- root[[inning]][[section]][[action]]
        eve_num <- T1 %>% xmlGetAttr("event_num") %>% as.numeric(.)
        
        T2 <- T1 %>% xmlAttrs(.) %>% data.frame(.)
        T2$Var <- rownames(T2)
        T2$Idx <- rep(eve_num, nrow(T2))
        T2 <- data.table(T2) %>% setnames(., names(.), c("Val", "Var", "Idx"))
        
        PLAYS <- rbind(PLAYS, T2)
        
        if(xmlName(T1) == "atbat"){
          
          N4 <- length(names(T1))
          
          for(pitch in 1:N4){
            
            T3 <- root[[inning]][[section]][[action]][[pitch]]
            
            T3 <- T3 %>% xmlAttrs(.) %>% data.frame(.)
            T3$Var <- rownames(T3)
            T3$Idx <- rep(eve_num, nrow(T3))
            T3 <- data.table(T3) %>% setnames(., names(.), c("Val", "Var", "Idx"))
            
            PITCHES <- rbind(PITCHES, T3)
            
            }}}}}}
  
  PLAYS <- dcast(PLAYS, Idx ~ Var, value.var = "Val")
  PLAYS <- PLAYS[Idx > 0]
  PLAYS <- PLAYS[, Date := as.Date(substr(start_tfs_zulu, 1, 10))]
  
  omits <- c("away_team_runs", "b1", "b2", "b3", names(PLAYS)[grep("_es", names(PLAYS))], "home_team_runs", "pitch", "play_guid", 
             "player", "rbi", "score", "start_tfs", "tfs", "tfs_zulu", "NA", "start_tfs_zulu", "event_num", "o", "s", "b")
  
  PLAYS <- PLAYS[, c(names(PLAYS) %in% omits == F), with = F]
  
  PITCHES <- PITCHES[Var %in% c("des")] %>% 
    .[, Val := as.character(Val)] %>% 
    .[, c("Idx", "Val"), with = F] %>% 
    setnames(., "Val", "PitchResult")
  
  TX <- merge(PLAYS, PITCHES, by = "Idx", all.x = T)
    
  
  return(TX)
  
}




players <- "http://gd2.mlb.com/components/game/mlb/year_2017/month_08/day_09/gid_2017_08_09_lanmlb_arimlb_1/players.xml"

playerParse <- function(mlbURL){
  
  DF <- xmlRoot(xmlParse(mlbURL))
  PLAYERS <- data.table("Val" = NA, "Var" = NA, "mlbID" = NA)
  
  for(team in 1:length(names(DF))){
    
    if(as.character(names(DF))[team] == "team"){
      
      N1 <- sum(names(DF[[team]]) == "player")
      
      for(player in 1:N1){
        
        ID <- DF[[team]][[player]] %>% xmlGetAttr("id")
        
        T1 <- DF[[team]][[player]] %>% xmlAttrs(.) %>% data.frame(.)
        T1$Var <- rownames(T1)
        T1 <- data.table(T1) %>% setnames(., names(.), c("Val", "Var"))
        T1 <- T1[, mlbID := rep(ID, nrow(T1))]
        
        PLAYERS <- rbind(PLAYERS, T1)
        
      }}}
  
   PLAYERS <- PLAYERS[is.na(mlbID) == F] %>% 
     dcast(., mlbID ~ Var, value.var = "Val") %>% 
     .[, fullName := paste(first, last, sep = " ")] %>% 
     .[, c("mlbID", "fullName", "game_position", "team_abbrev", "first", "last"), with = F] %>% 
     .[, first := as.character(first)] %>% 
     .[, last := as.character(last)]
   
   RETRO <- tableLoader("master", atWork = T) %>% 
     .[, nameFirst := gsub("\\. ", "\\.", nameFirst)] %>% 
     .[, fullName := paste(nameFirst, nameLast, sep = " ")] %>%
     .[year(as.Date(finalGame)) %in% c(year(today()) - c(1, 2))] %>% 
     .[, c("retroID", "fullName"), with = F]
   
   PLAYERS <- merge(PLAYERS, RETRO, by = "fullName", all.x = T) %>% 
     .[, retroID := ifelse(is.na(retroID), IDmaker(first, last, T), retroID)] %>% 
     .[, game_position := mapvalues(game_position, c("P", "C", "1B", "2B", "3B", "SS", "LF", "CF", "RF"),
       c("P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9"))]
  
  return(PLAYERS)
  
}

test <- playerParse(players)


test <- "http://gd2.mlb.com/components/game/mlb/year_2017/month_08/day_09/gid_2017_08_09_lanmlb_arimlb_1"
gameURL <- "http://gd2.mlb.com/components/game/mlb/year_2017/month_08/day_09/gid_2017_08_09_lanmlb_arimlb_1"
test2 <- "http://gd2.mlb.com/components/game/mlb/year_2017/month_08/day_01/gid_2017_08_01_kcamlb_balmlb_1"


parseMLB <- function(gameURL){
  
  event_url <- paste(gameURL, "game_events.xml", sep = "/")
  player_url <- paste(gameURL, "players.xml", sep = "/")
  
  PLAYS <- eventParse(event_url) %>% 
    .[, batter := as.character(batter)]
  
  PLAYERS <- suppressWarnings(playerParse(player_url))
  
  PLAYERS_arr <- c(PLAYERS$fullName)
  RETROID_arr <- c(PLAYERS$retroID)
  
  STARTERS <- PLAYERS[!is.na(game_position)] %>% 
    dcast(., team_abbrev ~ game_position, value.var = "retroID") %>% 
    .[, c("team_abbrev", c(paste("P", seq(2,9), sep = ""))), with = F] %>% 
    setnames(., "team_abbrev", "defTeam")
  
  PLAYERS2 <- PLAYERS[, c("mlbID", "team_abbrev"), with = F]
  teamCat <- as.character(unique(PLAYERS2$team_abbrev))
  PLAYERS2 <- PLAYERS2[, team_abbrev := ifelse(team_abbrev == teamCat[1], teamCat[2], teamCat[1])] %>% setnames(., names(.), c("batter", "defTeam"))
    
  PLAYS <- merge(PLAYS, PLAYERS2, by = "batter", all.x = T) %>% 
    .[order(Idx)]
  
  minIdx <- PLAYS[, min(Idx), by = defTeam]
  
  STARTERS <- merge(STARTERS, minIdx, by = "defTeam", all.x = T) %>% setnames(., "V1", "Idx")
  
  PLAYS <- merge(PLAYS, STARTERS, all.x = T, by = "Idx") %>% 
    .[, pitcher := mapvalues(pitcher, PLAYERS$mlbID, PLAYERS$retroID)] %>% 
    .[, batter := mapvalues(batter, PLAYERS$mlbID, PLAYERS$retroID)] %>% 
    .[, -c(grep("defTeam", names(.))), with = F]
  
  SUBS <- PLAYS[is.na(batter)] %>% 
    .[, des := trimws(des)] %>% 
    .[event %in% c("Game Advisory", "Pitching Substitution") == F] %>% 
    .[!grep("Pinch-hitter", des)]

  
  return(PLAYS)
  
}

temp <- parseMLB(test2)

# Things to incorporate into the parseMLB function:
# 1. Translating 'des' field into something similar to the play field in RetroSheets
# 2. Make the Play show up just once in the pitch array, at the appropriate point
# 3. Figure out what to do with multiple event per line
# 4. Add count
# 5. Recode PitchResult
# X. Recode batter to RetroID
# 7. Include defensive positions
# 8. Figure out what to do with substitutions


playerParse(players)
